// <auto-generated />
using System;
using ClinicManagement.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicManagement.Data.Migrations
{
    [DbContext(typeof(ClinicManagementDbContext))]
    [Migration("20250623032740_InitialCreateWithSeeding")]
    partial class InitialCreateWithSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClinicManagement.Data.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AppointmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('Scheduled')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("AppointmentId")
                        .HasName("PK__Appointm__8ECDFCCC56AF500B");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.InventoryItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("LeadTimeDays")
                        .HasColumnType("int");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<decimal?>("SellingPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.HasKey("ItemId")
                        .HasName("PK__Inventory__7BF7D5B66736C561");

                    b.HasIndex("VendorId");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.ItemBatch", b =>
                {
                    b.Property<int>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BatchID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BatchId"));

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("CostPerUnit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("date");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("BatchId")
                        .HasName("PK__ItemBatc__B28D3F372095039A");

                    b.HasIndex("ItemId");

                    b.HasIndex("VendorId");

                    b.ToTable("ItemBatches");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.MedicalRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("AppointmentID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("MedicalRecordRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("Prescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffID");

                    b.Property<string>("Treatment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("RecordId")
                        .HasName("PK__MedicalR__FBDF78C62A86B91A");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("MedicalRecordRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StaffId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BloodType")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmergencyContactName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmergencyContactNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("PatientId")
                        .HasName("PK__Patients__970EC346E8240D4B");

                    b.HasIndex("ContactNumber")
                        .IsUnique()
                        .HasFilter("[ContactNumber] IS NOT NULL");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            UpdatedAt = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Receptionist",
                            NormalizedName = "RECEPTIONIST",
                            UpdatedAt = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Name = "HR",
                            NormalizedName = "HR",
                            UpdatedAt = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Doctor",
                            NormalizedName = "DOCTOR",
                            UpdatedAt = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Nurse",
                            NormalizedName = "NURSE",
                            UpdatedAt = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Patient",
                            NormalizedName = "PATIENT",
                            UpdatedAt = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Name = "InventoryManager",
                            NormalizedName = "INVENTORYMANAGER",
                            UpdatedAt = new DateTime(2023, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("ServiceId")
                        .HasName("PK__Services__C51BB0EA0B0C46B1");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Routine physicals, well-woman exams, and age-appropriate screenings for conditions like diabetes or high blood pressure.",
                            Price = 100m,
                            ServiceName = "General Checkups and Screenings",
                            UpdatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ServiceId = 2,
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Addressing colds, flu, ear infections, skin rashes, and other minor ailments.",
                            Price = 100m,
                            ServiceName = "Treatment of Common Illnesses",
                            UpdatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ServiceId = 3,
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Providing vaccinations for children and adults, including flu shots and other recommended immunizations.",
                            Price = 100m,
                            ServiceName = "Vaccinations",
                            UpdatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ServiceId = 4,
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Helping patients manage conditions like diabetes, hypertension, and asthma. ",
                            Price = 100m,
                            ServiceName = "Chronic Disease Management",
                            UpdatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ServiceId = 5,
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Care for heart conditions.",
                            Price = 300m,
                            ServiceName = "Cardiology",
                            UpdatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ServiceId = 6,
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Skin-related issues and treatments.",
                            Price = 300m,
                            ServiceName = "Dermatology",
                            UpdatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ServiceId = 7,
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Musculoskeletal problems and injuries.",
                            Price = 300m,
                            ServiceName = "Orthopedics",
                            UpdatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ServiceId = 8,
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Rehabilitation and pain management.",
                            Price = 300m,
                            ServiceName = "Physical Therapy",
                            UpdatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ServiceId = 9,
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Foot and ankle care.",
                            Price = 300m,
                            ServiceName = "Podiatry",
                            UpdatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ServiceId = 10,
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Treatment of related conditions.",
                            Price = 300m,
                            ServiceName = "ENT (Ear, Nose, and Throat)",
                            UpdatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ServiceId = 11,
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Women's health and prenatal care.",
                            Price = 300m,
                            ServiceName = "Gynecology and Obstetrics",
                            UpdatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ServiceId = 12,
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Eye care.",
                            Price = 300m,
                            ServiceName = "Ophthalmology",
                            UpdatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ServiceId = 13,
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Oral health and dental procedures.",
                            Price = 300m,
                            ServiceName = "Dentistry",
                            UpdatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ServiceId = 14,
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Counseling, therapy, and psychiatric care.",
                            Price = 200m,
                            ServiceName = "Mental Health Services",
                            UpdatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ServiceId = 15,
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Support for substance abuse and addiction recovery.",
                            Price = 200m,
                            ServiceName = "Addiction Services",
                            UpdatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            ServiceId = 16,
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Blood work, urine tests, imaging (X-rays, ultrasounds), and other diagnostic procedures.",
                            Price = 200m,
                            ServiceName = "Laboratory and Diagnostic Services",
                            UpdatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.StaffDetail", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("StaffId")
                        .HasName("PK__StaffDet__96D4AAF741B20436");

                    b.HasIndex("UserId");

                    b.ToTable("StaffDetails");

                    b.HasData(
                        new
                        {
                            StaffId = 101,
                            ContactNumber = "09123456789",
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ava.chen@clinic.com",
                            FirstName = "Ava",
                            IsDeleted = false,
                            JobTitle = "General Practitioner",
                            LastName = "Chen",
                            Specialization = "Family Medicine"
                        },
                        new
                        {
                            StaffId = 102,
                            ContactNumber = "09234567890",
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ben.roberts@clinic.com",
                            FirstName = "Ben",
                            IsDeleted = false,
                            JobTitle = "General Practitioner",
                            LastName = "Roberts",
                            Specialization = "Internal Medicine"
                        },
                        new
                        {
                            StaffId = 103,
                            ContactNumber = "09345678901",
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "clara.garcia@clinic.com",
                            FirstName = "Clara",
                            IsDeleted = false,
                            JobTitle = "Cardiologist",
                            LastName = "Garcia",
                            Specialization = "Cardiology"
                        },
                        new
                        {
                            StaffId = 104,
                            ContactNumber = "09456789012",
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "david.lee@clinic.com",
                            FirstName = "David",
                            IsDeleted = false,
                            JobTitle = "Dermatologist",
                            LastName = "Lee",
                            Specialization = "Dermatology"
                        },
                        new
                        {
                            StaffId = 105,
                            ContactNumber = "09567890123",
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "emily.wang@clinic.com",
                            FirstName = "Emily",
                            IsDeleted = false,
                            JobTitle = "Orthopedic Surgeon",
                            LastName = "Wang",
                            Specialization = "Orthopedics"
                        },
                        new
                        {
                            StaffId = 106,
                            ContactNumber = "09678901234",
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "frank.miller@clinic.com",
                            FirstName = "Frank",
                            IsDeleted = false,
                            JobTitle = "Physical Therapist",
                            LastName = "Miller",
                            Specialization = "Physical Therapy"
                        },
                        new
                        {
                            StaffId = 107,
                            ContactNumber = "09789012345",
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "grace.kim@clinic.com",
                            FirstName = "Grace",
                            IsDeleted = false,
                            JobTitle = "Podiatrist",
                            LastName = "Kim",
                            Specialization = "Podiatry"
                        },
                        new
                        {
                            StaffId = 108,
                            ContactNumber = "09890123456",
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "henry.nguyen@clinic.com",
                            FirstName = "Henry",
                            IsDeleted = false,
                            JobTitle = "ENT Specialist",
                            LastName = "Nguyen",
                            Specialization = "Otorhinolaryngology (ENT)"
                        },
                        new
                        {
                            StaffId = 109,
                            ContactNumber = "09901234567",
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "isabella.patel@clinic.com",
                            FirstName = "Isabella",
                            IsDeleted = false,
                            JobTitle = "Obstetrician-Gynecologist",
                            LastName = "Patel",
                            Specialization = "Gynecology & Obstetrics"
                        },
                        new
                        {
                            StaffId = 110,
                            ContactNumber = "09012345678",
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "jack.davis@clinic.com",
                            FirstName = "Jack",
                            IsDeleted = false,
                            JobTitle = "Ophthalmologist",
                            LastName = "Davis",
                            Specialization = "Ophthalmology"
                        },
                        new
                        {
                            StaffId = 111,
                            ContactNumber = "09102345678",
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "kara.lopez@clinic.com",
                            FirstName = "Kara",
                            IsDeleted = false,
                            JobTitle = "Dentist",
                            LastName = "Lopez",
                            Specialization = "Dentistry"
                        },
                        new
                        {
                            StaffId = 112,
                            ContactNumber = "09213456789",
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "liam.martinez@clinic.com",
                            FirstName = "Liam",
                            IsDeleted = false,
                            JobTitle = "Psychiatrist",
                            LastName = "Martinez",
                            Specialization = "Psychiatry"
                        },
                        new
                        {
                            StaffId = 113,
                            ContactNumber = "09324567890",
                            CreatedAt = new DateTime(2025, 6, 23, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "mia.wilson@clinic.com",
                            FirstName = "Mia",
                            IsDeleted = false,
                            JobTitle = "Addiction Counselor",
                            LastName = "Wilson",
                            Specialization = "Addiction Medicine"
                        });
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.StockTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("BatchId")
                        .HasColumnType("int")
                        .HasColumnName("BatchID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("TransactionId")
                        .HasName("PK__StockTra__55433B6A7F2D065C");

                    b.HasIndex("BatchId");

                    b.HasIndex("PatientId");

                    b.HasIndex("StaffId");

                    b.ToTable("StockTransactions");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VendorId")
                        .HasName("PK__Vendors__FC8653AD1D3DE96A");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.VerificationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ContactMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("VerificationCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.Appointment", b =>
                {
                    b.HasOne("ClinicManagement.Data.Models.StaffDetail", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Appointme__Docto__5CD626F7");

                    b.HasOne("ClinicManagement.Data.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Appointme__Patie__5BE2A6F2");

                    b.HasOne("ClinicManagement.Data.Models.Service", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK__Appointme__Servi__5DCAEF64");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.InventoryItem", b =>
                {
                    b.HasOne("ClinicManagement.Data.Models.Vendor", "Vendor")
                        .WithMany("InventoryItems")
                        .HasForeignKey("VendorId")
                        .IsRequired()
                        .HasConstraintName("FK__Inventory__Vendo__6EF57B66");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.ItemBatch", b =>
                {
                    b.HasOne("ClinicManagement.Data.Models.InventoryItem", "Item")
                        .WithMany("ItemBatches")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__ItemBatch__ItemI__72C60C4A");

                    b.HasOne("ClinicManagement.Data.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");

                    b.Navigation("Item");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.MedicalRecord", b =>
                {
                    b.HasOne("ClinicManagement.Data.Models.Appointment", "Appointment")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK__MedicalRe__Appoi__60A75C0F");

                    b.HasOne("ClinicManagement.Data.Models.MedicalRecord", null)
                        .WithMany("MedicalRecords")
                        .HasForeignKey("MedicalRecordRecordId");

                    b.HasOne("ClinicManagement.Data.Models.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK__MedicalRe__Patie__5FB337D6");

                    b.HasOne("ClinicManagement.Data.Models.Service", "Service")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__MedicalRe__Servi__XXXXXX");

                    b.HasOne("ClinicManagement.Data.Models.StaffDetail", "Staff")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK_MedicalRecords_StaffDetails_StaffID");

                    b.Navigation("Appointment");

                    b.Navigation("Patient");

                    b.Navigation("Service");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.Patient", b =>
                {
                    b.HasOne("ClinicManagement.Data.Models.User", null)
                        .WithOne("Patient")
                        .HasForeignKey("ClinicManagement.Data.Models.Patient", "UserId");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.StaffDetail", b =>
                {
                    b.HasOne("ClinicManagement.Data.Models.User", "User")
                        .WithMany("StaffDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_StaffDetails_Users_UserId_New");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.StockTransaction", b =>
                {
                    b.HasOne("ClinicManagement.Data.Models.ItemBatch", "Batch")
                        .WithMany("StockTransactions")
                        .HasForeignKey("BatchId")
                        .IsRequired()
                        .HasConstraintName("FK__StockTran__Batch__75A278FBC");

                    b.HasOne("ClinicManagement.Data.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("ClinicManagement.Data.Models.StaffDetail", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.Navigation("Batch");

                    b.Navigation("Patient");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.UserRole", b =>
                {
                    b.HasOne("ClinicManagement.Data.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.Data.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.VerificationCode", b =>
                {
                    b.HasOne("ClinicManagement.Data.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("ClinicManagement.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ClinicManagement.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ClinicManagement.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ClinicManagement.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.Appointment", b =>
                {
                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.InventoryItem", b =>
                {
                    b.Navigation("ItemBatches");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.ItemBatch", b =>
                {
                    b.Navigation("StockTransactions");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.MedicalRecord", b =>
                {
                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.Service", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.StaffDetail", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.User", b =>
                {
                    b.Navigation("Patient");

                    b.Navigation("StaffDetails");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ClinicManagement.Data.Models.Vendor", b =>
                {
                    b.Navigation("InventoryItems");
                });
#pragma warning restore 612, 618
        }
    }
}
